lb = as.double(ATE) - 1.96*as.double(SE),
ub = as.double(ATE) + 1.96*as.double(SE)) %>%
add_column(iter = c(1:nrow(tmp))) %>% mutate(bias = as.double(ATE) - Effect_Size)
#write_csv(plas_corr1, paste0(out_path, Sys.Date(), "-plasmode_sim_CV-TMLE_GLM_IPW_1000.csv"))
sim_res <- sim_corr1 %>% group_by(TYPE) %>%
summarize(mu_ATE = mean(ATE), med_ATE = median(ATE),
mu_SE = mean(SE), med_SE = median(SE),
mu_bias = mean(bias), med_bias = median(bias),
var = var(ATE), MSE = var + mu_bias^2,
coverage = sum(lb <= Effect_Size & ub >= Effect_Size)/N_sims)
out_path <- "/Users/garethalex/Desktop/HuangGroup/cvtmle_plasmode/Data/"
boot1.out <- data.frame(matrix(unlist(tmp),ncol=3))
fac.to.num <- function(f) as.numeric(levels(f))[f]
boot1.out[,1:2] <- lapply(boot1.out[,1:2], fac.to.num)
boot1.out %>% group_by(X3)
sim_res
}
{
pos <- max(sim_corr1$ub)
sim_plot <- sim_corr1 %>%
ggplot(aes(x = iter, y = ATE, color = TYPE)) +
geom_point() + geom_errorbar(aes(ymin = lb, ymax = ub)) +
geom_hline(aes(yintercept = Effect_Size)) +
# geom_hline(data = filter(sim_corr1, substring(TYPE,1,3) %in% c("AIP", "GLM")), aes(yintercept = mean(ATE)), linetype = "dashed") +
# geom_hline(data = filter(sim_corr1, substring(TYPE,1,2) == "CV"), aes(yintercept = mean(ATE)), linetype = "dotted") +
geom_hline(data = sim_corr1, aes(yintercept = mean(ATE)), linetype = "dotted") +
# geom_text(data = filter(sim_corr1, substring(TYPE,1,3) %in% c("AIP", "GLM")),
#           aes(N_sims, pos, hjust = "right",
#               label = paste("\n\nMean bias = ", as.character(round(mean(bias), 3)),
#                             "\nMedian bias = ", as.character(round(median(bias), 3)),
#                             "\nMSE = ", as.character(round(var(ATE) + mean(bias)^2, 3)),
#                             "\nCoverage = ", as.character(round(sum(lb <= Effect_Size & ub >= Effect_Size)/N_sims, 3)) ))) +
# geom_text(data = filter(sim_corr1, substring(TYPE,1,2) == "CV"),
#           aes(N_sims, pos, hjust = "right",
#               label = paste("\n\nMean bias = ", as.character(round(mean(bias), 3)),
#                             "\nMedian bias = ", as.character(round(median(bias), 3)),
#                             "\nMSE = ", as.character(round(var(ATE) + mean(bias)^2, 3)),
#                             "\nCoverage = ", as.character(round(sum(lb <= Effect_Size & ub >= Effect_Size)/N_sims, 3)) ))) +
labs(x = "iteration", color = "Estimator") +
facet_wrap(~TYPE) +
theme(legend.position = "none")
sim_plot
}
##################################
## SUMMARIZE AND VISUALIZE
##################################
{
tmp <- NULL
for(i in 1:N_sims){
tmp <- rbind(tmp, boot1[[i]])
}
sim_corr1 <- as_tibble(tmp) %>%
mutate(ATE = as.double(ATE), SE = as.double(SE),
lb = as.double(ATE) - 1.96*as.double(SE),
ub = as.double(ATE) + 1.96*as.double(SE)) %>%
add_column(iter = c(1:nrow(tmp))) %>% mutate(bias = as.double(ATE) - Effect_Size)
#write_csv(plas_corr1, paste0(out_path, Sys.Date(), "-plasmode_sim_CV-TMLE_GLM_IPW_1000.csv"))
sim_res <- sim_corr1 %>% group_by(TYPE) %>%
summarize(mu_ATE = mean(ATE), med_ATE = median(ATE),
mu_SE = mean(SE), med_SE = median(SE),
mu_bias = mean(bias), med_bias = median(bias),
var = var(ATE), MSE = var + mu_bias^2,
coverage = sum(lb <= Effect_Size & ub >= Effect_Size)/N_sims)
out_path <- "/Users/garethalex/Desktop/HuangGroup/cvtmle_plasmode/Data/"
boot1.out <- data.frame(matrix(unlist(tmp),ncol=3))
fac.to.num <- function(f) as.numeric(levels(f))[f]
boot1.out[,1:2] <- lapply(boot1.out[,1:2], fac.to.num)
boot1.out %>% group_by(X3)
sim_res
}
{
set.seed(42782)
tic()
N_sims <- 100# this should <= plas_sim_N
# regression models for GLM / AIPW
reg.formulas <- make.formula("Y", "A",ver = data.ver)
expForm <- reg.formulas$expForm
outForm <- reg.formulas$outForm
# specify which set of learners for SL
### NON-SMOOTH
short_tmle_lib <- SL_param_list
tmle_lib <- lrnr_SL
aipw_lib <- SL.lib
#### SMOOTH
# short_tmle_lib <- SL_list
# tmle_lib <- lrnr_SL_param
# aipw_lib <- SL.param
boot1 <- foreach(i = 1:N_sims) %dopar% {
require(tidyverse)
require(tmle3)
require(sl3)
require(SuperLearner)
# Initialize dataset
# i<-1
plas_data <- cbind(id = plas_sims$Sim_Data[i],
A = plas_sims$Sim_Data[i + (2*plas_sim_N)],
Y = plas_sims$Sim_Data[i + plas_sim_N])
colnames(plas_data) <- c("id", "A", "Y")
set1 <- suppressMessages(left_join(as_tibble(plas_data), as_tibble(plas))) #dplyr::select(as_tibble(plas), -Y5, -A1))) # add covariates
# mean(set1[which(set1$A==1),]$Y) - mean(set1[which(set1$A==0),]$Y)
#mean(set1[which(set1$A1==1),]$Y) - mean(set1[which(set1$A1==0),]$Y)
tset <- set1 %>% mutate(YT = (Y-min(set1$Y))/(max(set1$Y)- min(set1$Y)))
# set1 <- set1[1:N_samp, ]
# tset <- tset[1:N_samp, ]
getRES(set1, tset, aipw_lib, tmle_lib, short_tmle_lib,
doAIPW=0, doDCAIPW=0,
doIPW = 0,
doTMLE=1, doManuTMLE=0, doShortTMLE = 0,
doDCTMLE=0,
num_cf=5,
#control=list()
control=SuperLearner.CV.control(V=2)
)
}
toc()
}
{
set.seed(42782)
tic()
N_sims <- 50# this should <= plas_sim_N
# regression models for GLM / AIPW
reg.formulas <- make.formula("Y", "A",ver = data.ver)
expForm <- reg.formulas$expForm
outForm <- reg.formulas$outForm
# specify which set of learners for SL
### NON-SMOOTH
short_tmle_lib <- SL_param_list
tmle_lib <- lrnr_SL
aipw_lib <- SL.lib
#### SMOOTH
# short_tmle_lib <- SL_list
# tmle_lib <- lrnr_SL_param
# aipw_lib <- SL.param
boot1 <- foreach(i = 1:N_sims) %dopar% {
require(tidyverse)
require(tmle3)
require(sl3)
require(SuperLearner)
# Initialize dataset
# i<-1
plas_data <- cbind(id = plas_sims$Sim_Data[i],
A = plas_sims$Sim_Data[i + (2*plas_sim_N)],
Y = plas_sims$Sim_Data[i + plas_sim_N])
colnames(plas_data) <- c("id", "A", "Y")
set1 <- suppressMessages(left_join(as_tibble(plas_data), as_tibble(plas))) #dplyr::select(as_tibble(plas), -Y5, -A1))) # add covariates
# mean(set1[which(set1$A==1),]$Y) - mean(set1[which(set1$A==0),]$Y)
#mean(set1[which(set1$A1==1),]$Y) - mean(set1[which(set1$A1==0),]$Y)
tset <- set1 %>% mutate(YT = (Y-min(set1$Y))/(max(set1$Y)- min(set1$Y)))
# set1 <- set1[1:N_samp, ]
# tset <- tset[1:N_samp, ]
getRES(set1, tset, aipw_lib, tmle_lib, short_tmle_lib,
doAIPW=0, doDCAIPW=0,
doIPW = 0,
doTMLE=1, doManuTMLE=0, doShortTMLE = 0,
doDCTMLE=0,
num_cf=5,
#control=list()
control=SuperLearner.CV.control(V=2)
)
}
toc()
}
##################################
## SUMMARIZE AND VISUALIZE
##################################
{
tmp <- NULL
for(i in 1:N_sims){
tmp <- rbind(tmp, boot1[[i]])
}
sim_corr1 <- as_tibble(tmp) %>%
mutate(ATE = as.double(ATE), SE = as.double(SE),
lb = as.double(ATE) - 1.96*as.double(SE),
ub = as.double(ATE) + 1.96*as.double(SE)) %>%
add_column(iter = c(1:nrow(tmp))) %>% mutate(bias = as.double(ATE) - Effect_Size)
#write_csv(plas_corr1, paste0(out_path, Sys.Date(), "-plasmode_sim_CV-TMLE_GLM_IPW_1000.csv"))
sim_res <- sim_corr1 %>% group_by(TYPE) %>%
summarize(mu_ATE = mean(ATE), med_ATE = median(ATE),
mu_SE = mean(SE), med_SE = median(SE),
mu_bias = mean(bias), med_bias = median(bias),
var = var(ATE), MSE = var + mu_bias^2,
coverage = sum(lb <= Effect_Size & ub >= Effect_Size)/N_sims)
out_path <- "/Users/garethalex/Desktop/HuangGroup/cvtmle_plasmode/Data/"
boot1.out <- data.frame(matrix(unlist(tmp),ncol=3))
fac.to.num <- function(f) as.numeric(levels(f))[f]
boot1.out[,1:2] <- lapply(boot1.out[,1:2], fac.to.num)
boot1.out %>% group_by(X3)
sim_res
}
{
pos <- max(sim_corr1$ub)
sim_plot <- sim_corr1 %>%
ggplot(aes(x = iter, y = ATE, color = TYPE)) +
geom_point() + geom_errorbar(aes(ymin = lb, ymax = ub)) +
geom_hline(aes(yintercept = Effect_Size)) +
# geom_hline(data = filter(sim_corr1, substring(TYPE,1,3) %in% c("AIP", "GLM")), aes(yintercept = mean(ATE)), linetype = "dashed") +
# geom_hline(data = filter(sim_corr1, substring(TYPE,1,2) == "CV"), aes(yintercept = mean(ATE)), linetype = "dotted") +
geom_hline(data = sim_corr1, aes(yintercept = mean(ATE)), linetype = "dotted") +
# geom_text(data = filter(sim_corr1, substring(TYPE,1,3) %in% c("AIP", "GLM")),
#           aes(N_sims, pos, hjust = "right",
#               label = paste("\n\nMean bias = ", as.character(round(mean(bias), 3)),
#                             "\nMedian bias = ", as.character(round(median(bias), 3)),
#                             "\nMSE = ", as.character(round(var(ATE) + mean(bias)^2, 3)),
#                             "\nCoverage = ", as.character(round(sum(lb <= Effect_Size & ub >= Effect_Size)/N_sims, 3)) ))) +
# geom_text(data = filter(sim_corr1, substring(TYPE,1,2) == "CV"),
#           aes(N_sims, pos, hjust = "right",
#               label = paste("\n\nMean bias = ", as.character(round(mean(bias), 3)),
#                             "\nMedian bias = ", as.character(round(median(bias), 3)),
#                             "\nMSE = ", as.character(round(var(ATE) + mean(bias)^2, 3)),
#                             "\nCoverage = ", as.character(round(sum(lb <= Effect_Size & ub >= Effect_Size)/N_sims, 3)) ))) +
labs(x = "iteration", color = "Estimator") +
facet_wrap(~TYPE) +
theme(legend.position = "none")
sim_plot
}
{
set.seed(42782)
tic()
N_sims <- 10# this should <= plas_sim_N
# regression models for GLM / AIPW
reg.formulas <- make.formula("Y", "A",ver = data.ver)
expForm <- reg.formulas$expForm
outForm <- reg.formulas$outForm
# specify which set of learners for SL
### NON-SMOOTH
short_tmle_lib <- SL_param_list
tmle_lib <- lrnr_SL
aipw_lib <- SL.lib
#### SMOOTH
# short_tmle_lib <- SL_list
# tmle_lib <- lrnr_SL_param
# aipw_lib <- SL.param
boot1 <- foreach(i = 1:N_sims) %dopar% {
require(tidyverse)
require(tmle3)
require(sl3)
require(SuperLearner)
# Initialize dataset
# i<-1
plas_data <- cbind(id = plas_sims$Sim_Data[i],
A = plas_sims$Sim_Data[i + (2*plas_sim_N)],
Y = plas_sims$Sim_Data[i + plas_sim_N])
colnames(plas_data) <- c("id", "A", "Y")
set1 <- suppressMessages(left_join(as_tibble(plas_data), as_tibble(plas))) #dplyr::select(as_tibble(plas), -Y5, -A1))) # add covariates
# mean(set1[which(set1$A==1),]$Y) - mean(set1[which(set1$A==0),]$Y)
#mean(set1[which(set1$A1==1),]$Y) - mean(set1[which(set1$A1==0),]$Y)
tset <- set1 %>% mutate(YT = (Y-min(set1$Y))/(max(set1$Y)- min(set1$Y)))
# set1 <- set1[1:N_samp, ]
# tset <- tset[1:N_samp, ]
getRES(set1, tset, aipw_lib, tmle_lib, short_tmle_lib,
doAIPW=0, doDCAIPW=0,
doIPW = 0,
doTMLE=0, doManuTMLE=1, doShortTMLE = 0,
doDCTMLE=0,
num_cf=5,
#control=list()
control=SuperLearner.CV.control(V=2)
)
}
toc()
}
##################################
## SUMMARIZE AND VISUALIZE
##################################
{
tmp <- NULL
for(i in 1:N_sims){
tmp <- rbind(tmp, boot1[[i]])
}
sim_corr1 <- as_tibble(tmp) %>%
mutate(ATE = as.double(ATE), SE = as.double(SE),
lb = as.double(ATE) - 1.96*as.double(SE),
ub = as.double(ATE) + 1.96*as.double(SE)) %>%
add_column(iter = c(1:nrow(tmp))) %>% mutate(bias = as.double(ATE) - Effect_Size)
#write_csv(plas_corr1, paste0(out_path, Sys.Date(), "-plasmode_sim_CV-TMLE_GLM_IPW_1000.csv"))
sim_res <- sim_corr1 %>% group_by(TYPE) %>%
summarize(mu_ATE = mean(ATE), med_ATE = median(ATE),
mu_SE = mean(SE), med_SE = median(SE),
mu_bias = mean(bias), med_bias = median(bias),
var = var(ATE), MSE = var + mu_bias^2,
coverage = sum(lb <= Effect_Size & ub >= Effect_Size)/N_sims)
out_path <- "/Users/garethalex/Desktop/HuangGroup/cvtmle_plasmode/Data/"
boot1.out <- data.frame(matrix(unlist(tmp),ncol=3))
fac.to.num <- function(f) as.numeric(levels(f))[f]
boot1.out[,1:2] <- lapply(boot1.out[,1:2], fac.to.num)
boot1.out %>% group_by(X3)
sim_res
}
{
pos <- max(sim_corr1$ub)
sim_plot <- sim_corr1 %>%
ggplot(aes(x = iter, y = ATE, color = TYPE)) +
geom_point() + geom_errorbar(aes(ymin = lb, ymax = ub)) +
geom_hline(aes(yintercept = Effect_Size)) +
# geom_hline(data = filter(sim_corr1, substring(TYPE,1,3) %in% c("AIP", "GLM")), aes(yintercept = mean(ATE)), linetype = "dashed") +
# geom_hline(data = filter(sim_corr1, substring(TYPE,1,2) == "CV"), aes(yintercept = mean(ATE)), linetype = "dotted") +
geom_hline(data = sim_corr1, aes(yintercept = mean(ATE)), linetype = "dotted") +
# geom_text(data = filter(sim_corr1, substring(TYPE,1,3) %in% c("AIP", "GLM")),
#           aes(N_sims, pos, hjust = "right",
#               label = paste("\n\nMean bias = ", as.character(round(mean(bias), 3)),
#                             "\nMedian bias = ", as.character(round(median(bias), 3)),
#                             "\nMSE = ", as.character(round(var(ATE) + mean(bias)^2, 3)),
#                             "\nCoverage = ", as.character(round(sum(lb <= Effect_Size & ub >= Effect_Size)/N_sims, 3)) ))) +
# geom_text(data = filter(sim_corr1, substring(TYPE,1,2) == "CV"),
#           aes(N_sims, pos, hjust = "right",
#               label = paste("\n\nMean bias = ", as.character(round(mean(bias), 3)),
#                             "\nMedian bias = ", as.character(round(median(bias), 3)),
#                             "\nMSE = ", as.character(round(var(ATE) + mean(bias)^2, 3)),
#                             "\nCoverage = ", as.character(round(sum(lb <= Effect_Size & ub >= Effect_Size)/N_sims, 3)) ))) +
labs(x = "iteration", color = "Estimator") +
facet_wrap(~TYPE) +
theme(legend.position = "none")
sim_plot
}
{
set.seed(42782)
tic()
N_sims <- 10# this should <= plas_sim_N
# regression models for GLM / AIPW
reg.formulas <- make.formula("Y", "A",ver = data.ver)
expForm <- reg.formulas$expForm
outForm <- reg.formulas$outForm
# specify which set of learners for SL
### NON-SMOOTH
short_tmle_lib <- SL_param_list
tmle_lib <- lrnr_SL
aipw_lib <- SL.lib
#### SMOOTH
# short_tmle_lib <- SL_list
# tmle_lib <- lrnr_SL_param
# aipw_lib <- SL.param
boot1 <- foreach(i = 1:N_sims) %dopar% {
require(tidyverse)
require(tmle3)
require(sl3)
require(SuperLearner)
# Initialize dataset
# i<-1
plas_data <- cbind(id = plas_sims$Sim_Data[i],
A = plas_sims$Sim_Data[i + (2*plas_sim_N)],
Y = plas_sims$Sim_Data[i + plas_sim_N])
colnames(plas_data) <- c("id", "A", "Y")
set1 <- suppressMessages(left_join(as_tibble(plas_data), as_tibble(plas))) #dplyr::select(as_tibble(plas), -Y5, -A1))) # add covariates
# mean(set1[which(set1$A==1),]$Y) - mean(set1[which(set1$A==0),]$Y)
#mean(set1[which(set1$A1==1),]$Y) - mean(set1[which(set1$A1==0),]$Y)
tset <- set1 %>% mutate(YT = (Y-min(set1$Y))/(max(set1$Y)- min(set1$Y)))
# set1 <- set1[1:N_samp, ]
# tset <- tset[1:N_samp, ]
getRES(set1, tset, aipw_lib, tmle_lib, short_tmle_lib,
doAIPW=0, doDCAIPW=0,
doIPW = 0,
doTMLE=0, doManuTMLE=0, doShortTMLE = 0,
doDCTMLE=1,
num_cf=5,
#control=list()
control=SuperLearner.CV.control(V=2)
)
}
toc()
}
##################################
## SUMMARIZE AND VISUALIZE
##################################
{
tmp <- NULL
for(i in 1:N_sims){
tmp <- rbind(tmp, boot1[[i]])
}
sim_corr1 <- as_tibble(tmp) %>%
mutate(ATE = as.double(ATE), SE = as.double(SE),
lb = as.double(ATE) - 1.96*as.double(SE),
ub = as.double(ATE) + 1.96*as.double(SE)) %>%
add_column(iter = c(1:nrow(tmp))) %>% mutate(bias = as.double(ATE) - Effect_Size)
#write_csv(plas_corr1, paste0(out_path, Sys.Date(), "-plasmode_sim_CV-TMLE_GLM_IPW_1000.csv"))
sim_res <- sim_corr1 %>% group_by(TYPE) %>%
summarize(mu_ATE = mean(ATE), med_ATE = median(ATE),
mu_SE = mean(SE), med_SE = median(SE),
mu_bias = mean(bias), med_bias = median(bias),
var = var(ATE), MSE = var + mu_bias^2,
coverage = sum(lb <= Effect_Size & ub >= Effect_Size)/N_sims)
out_path <- "/Users/garethalex/Desktop/HuangGroup/cvtmle_plasmode/Data/"
boot1.out <- data.frame(matrix(unlist(tmp),ncol=3))
fac.to.num <- function(f) as.numeric(levels(f))[f]
boot1.out[,1:2] <- lapply(boot1.out[,1:2], fac.to.num)
boot1.out %>% group_by(X3)
sim_res
}
{
pos <- max(sim_corr1$ub)
sim_plot <- sim_corr1 %>%
ggplot(aes(x = iter, y = ATE, color = TYPE)) +
geom_point() + geom_errorbar(aes(ymin = lb, ymax = ub)) +
geom_hline(aes(yintercept = Effect_Size)) +
# geom_hline(data = filter(sim_corr1, substring(TYPE,1,3) %in% c("AIP", "GLM")), aes(yintercept = mean(ATE)), linetype = "dashed") +
# geom_hline(data = filter(sim_corr1, substring(TYPE,1,2) == "CV"), aes(yintercept = mean(ATE)), linetype = "dotted") +
geom_hline(data = sim_corr1, aes(yintercept = mean(ATE)), linetype = "dotted") +
# geom_text(data = filter(sim_corr1, substring(TYPE,1,3) %in% c("AIP", "GLM")),
#           aes(N_sims, pos, hjust = "right",
#               label = paste("\n\nMean bias = ", as.character(round(mean(bias), 3)),
#                             "\nMedian bias = ", as.character(round(median(bias), 3)),
#                             "\nMSE = ", as.character(round(var(ATE) + mean(bias)^2, 3)),
#                             "\nCoverage = ", as.character(round(sum(lb <= Effect_Size & ub >= Effect_Size)/N_sims, 3)) ))) +
# geom_text(data = filter(sim_corr1, substring(TYPE,1,2) == "CV"),
#           aes(N_sims, pos, hjust = "right",
#               label = paste("\n\nMean bias = ", as.character(round(mean(bias), 3)),
#                             "\nMedian bias = ", as.character(round(median(bias), 3)),
#                             "\nMSE = ", as.character(round(var(ATE) + mean(bias)^2, 3)),
#                             "\nCoverage = ", as.character(round(sum(lb <= Effect_Size & ub >= Effect_Size)/N_sims, 3)) ))) +
labs(x = "iteration", color = "Estimator") +
facet_wrap(~TYPE) +
theme(legend.position = "none")
sim_plot
}
{
set.seed(42782)
tic()
N_sims <- 10# this should <= plas_sim_N
# regression models for GLM / AIPW
reg.formulas <- make.formula("Y", "A",ver = data.ver)
expForm <- reg.formulas$expForm
outForm <- reg.formulas$outForm
# specify which set of learners for SL
# ### NON-SMOOTH
# short_tmle_lib <- SL_param_list
# tmle_lib <- lrnr_SL
# aipw_lib <- SL.lib
### SMOOTH
short_tmle_lib <- SL_list
tmle_lib <- lrnr_SL_param
aipw_lib <- SL.param
boot1 <- foreach(i = 1:N_sims) %dopar% {
require(tidyverse)
require(tmle3)
require(sl3)
require(SuperLearner)
# Initialize dataset
# i<-1
plas_data <- cbind(id = plas_sims$Sim_Data[i],
A = plas_sims$Sim_Data[i + (2*plas_sim_N)],
Y = plas_sims$Sim_Data[i + plas_sim_N])
colnames(plas_data) <- c("id", "A", "Y")
set1 <- suppressMessages(left_join(as_tibble(plas_data), as_tibble(plas))) #dplyr::select(as_tibble(plas), -Y5, -A1))) # add covariates
# mean(set1[which(set1$A==1),]$Y) - mean(set1[which(set1$A==0),]$Y)
#mean(set1[which(set1$A1==1),]$Y) - mean(set1[which(set1$A1==0),]$Y)
tset <- set1 %>% mutate(YT = (Y-min(set1$Y))/(max(set1$Y)- min(set1$Y)))
# set1 <- set1[1:N_samp, ]
# tset <- tset[1:N_samp, ]
getRES(set1, tset, aipw_lib, tmle_lib, short_tmle_lib,
doAIPW=0, doDCAIPW=0,
doIPW = 0,
doTMLE=0, doManuTMLE=0, doShortTMLE = 0,
doDCTMLE=1,
num_cf=5,
#control=list()
control=SuperLearner.CV.control(V=2)
)
}
toc()
}
##################################
## SUMMARIZE AND VISUALIZE
##################################
{
tmp <- NULL
for(i in 1:N_sims){
tmp <- rbind(tmp, boot1[[i]])
}
sim_corr1 <- as_tibble(tmp) %>%
mutate(ATE = as.double(ATE), SE = as.double(SE),
lb = as.double(ATE) - 1.96*as.double(SE),
ub = as.double(ATE) + 1.96*as.double(SE)) %>%
add_column(iter = c(1:nrow(tmp))) %>% mutate(bias = as.double(ATE) - Effect_Size)
#write_csv(plas_corr1, paste0(out_path, Sys.Date(), "-plasmode_sim_CV-TMLE_GLM_IPW_1000.csv"))
sim_res <- sim_corr1 %>% group_by(TYPE) %>%
summarize(mu_ATE = mean(ATE), med_ATE = median(ATE),
mu_SE = mean(SE), med_SE = median(SE),
mu_bias = mean(bias), med_bias = median(bias),
var = var(ATE), MSE = var + mu_bias^2,
coverage = sum(lb <= Effect_Size & ub >= Effect_Size)/N_sims)
out_path <- "/Users/garethalex/Desktop/HuangGroup/cvtmle_plasmode/Data/"
boot1.out <- data.frame(matrix(unlist(tmp),ncol=3))
fac.to.num <- function(f) as.numeric(levels(f))[f]
boot1.out[,1:2] <- lapply(boot1.out[,1:2], fac.to.num)
boot1.out %>% group_by(X3)
sim_res
}
{
pos <- max(sim_corr1$ub)
sim_plot <- sim_corr1 %>%
ggplot(aes(x = iter, y = ATE, color = TYPE)) +
geom_point() + geom_errorbar(aes(ymin = lb, ymax = ub)) +
geom_hline(aes(yintercept = Effect_Size)) +
# geom_hline(data = filter(sim_corr1, substring(TYPE,1,3) %in% c("AIP", "GLM")), aes(yintercept = mean(ATE)), linetype = "dashed") +
# geom_hline(data = filter(sim_corr1, substring(TYPE,1,2) == "CV"), aes(yintercept = mean(ATE)), linetype = "dotted") +
geom_hline(data = sim_corr1, aes(yintercept = mean(ATE)), linetype = "dotted") +
# geom_text(data = filter(sim_corr1, substring(TYPE,1,3) %in% c("AIP", "GLM")),
#           aes(N_sims, pos, hjust = "right",
#               label = paste("\n\nMean bias = ", as.character(round(mean(bias), 3)),
#                             "\nMedian bias = ", as.character(round(median(bias), 3)),
#                             "\nMSE = ", as.character(round(var(ATE) + mean(bias)^2, 3)),
#                             "\nCoverage = ", as.character(round(sum(lb <= Effect_Size & ub >= Effect_Size)/N_sims, 3)) ))) +
# geom_text(data = filter(sim_corr1, substring(TYPE,1,2) == "CV"),
#           aes(N_sims, pos, hjust = "right",
#               label = paste("\n\nMean bias = ", as.character(round(mean(bias), 3)),
#                             "\nMedian bias = ", as.character(round(median(bias), 3)),
#                             "\nMSE = ", as.character(round(var(ATE) + mean(bias)^2, 3)),
#                             "\nCoverage = ", as.character(round(sum(lb <= Effect_Size & ub >= Effect_Size)/N_sims, 3)) ))) +
labs(x = "iteration", color = "Estimator") +
facet_wrap(~TYPE) +
theme(legend.position = "none")
sim_plot
}
