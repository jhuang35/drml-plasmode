}
)
return(list(res.path=res.path, adjusted=adjusted))
}
is.timing <- T;tim.str <- ifelse(is.timing,"-timing","")
{
out.lst <- c("med_bias","med_SE","coverage","var", "med_t")
out.str.lst <- character(length(out.lst))
source("20200816-Result-Summary.R")
i <- 1
# load(paste0(path,folder, "/result-GComp","-par",tim.str,".RData"))
for (out.var in out.lst){
out.table.str <- ""
for (mtd in mtd.lst){
# if ((mtd  != "IPW") || (mtd  != "GComp")){
#   is.timing <- T;tim.str <- ifelse(is.timing,"-timing","")
#   res.path <- paste0(path,folder, "/result-",mtd,"-non-par",tim.str,".RData")
# }else{
res.path <- paste0(path,folder, "/result-",mtd,"-par",tim.str,".RData")
load(res.path)
path.obj <- adjustPath(res.path)
res.path <- path.obj$res.path
out.table.str <- append.res(out.table.str, res.path, out.var, path.obj$adjusted)
if ((mtd  != "IPW") && (mtd  != "GComp")){ # append non-par result
res.path <- paste0(path,folder, "/result-",mtd,"-non-par",tim.str,".RData")
path.obj <- adjustPath(res.path)
res.path <- path.obj$res.path
out.table.str <- append.res(out.table.str, res.path, out.var, path.obj$adjusted)
}
}
out.str.lst[i] <- out.table.str
i <- i+1
}
out.str.lst[1] <- paste0("Bias ($\\times$ 100)",out.str.lst[1], "\\","\\  [2pt] \n")
out.str.lst[2] <- paste0("SE ",out.str.lst[2], "\\","\\  [2pt] \n")
out.str.lst[3] <- paste0("CI covg. ",out.str.lst[3], "\\","\\  [2pt] \n")
out.str.lst[4] <- paste0("BVar ",out.str.lst[4], "\\","\\  [10pt] \n")
out.str.lst[5] <- paste0("30 cores ",out.str.lst[5], "\\","\\  [2pt] \n")
}
cat(out.str.lst)
setwd("~/Desktop/HuangGroup/cvtmle_plasmode/Code")
Effect_Size <- 6.6
path <- "~/Desktop/HuangGroup/cvtmle_plasmode/Code/cluster/no4/"
folder <- "RDataFiles";
# folder<-"ResBefore5Apr2021"
is.timing <- T
tim.str <- ifelse(is.timing,"-timing","")
# mtd.lst <- c("IPW","GComp","TMLE","AIPW","DCTMLE","DCAIPW")
mtd.lst  <- c("IPW","TMLE","AIPW","DCTMLE","DCAIPW")
adjustPath <- function(res.path){
adjusted=F
tryCatch(
{
message(paste0("Try loading ", res.path))
load(res.path)
},
error=function(cond) {
message(paste("There is no file at", res.path))
res.path <- paste0(path,folder, "/result-",mtd,"-par",".RData")
adjusted=T
message(paste("Set path to the non-timing version:", res.path))
return(NULL)
},
finally={
a <- 1
}
)
return(list(res.path=res.path, adjusted=adjusted))
}
is.timing <- T;tim.str <- ifelse(is.timing,"-timing","")
{
out.lst <- c("med_bias","med_SE","coverage","var", "med_t")
out.str.lst <- character(length(out.lst))
source("20200816-Result-Summary.R")
i <- 1
# load(paste0(path,folder, "/result-GComp","-par",tim.str,".RData"))
for (out.var in out.lst){
out.table.str <- ""
for (mtd in mtd.lst){
# if ((mtd  != "IPW") || (mtd  != "GComp")){
#   is.timing <- T;tim.str <- ifelse(is.timing,"-timing","")
#   res.path <- paste0(path,folder, "/result-",mtd,"-non-par",tim.str,".RData")
# }else{
res.path <- paste0(path,folder, "/result-",mtd,"-par",tim.str,".RData")
load(res.path)
path.obj <- adjustPath(res.path)
res.path <- path.obj$res.path
out.table.str <- append.res(out.table.str, res.path, out.var, path.obj$adjusted)
if ((mtd  != "IPW") && (mtd  != "GComp")){ # append non-par result
res.path <- paste0(path,folder, "/result-",mtd,"-non-par",tim.str,".RData")
path.obj <- adjustPath(res.path)
res.path <- path.obj$res.path
out.table.str <- append.res(out.table.str, res.path, out.var, path.obj$adjusted)
}
}
out.str.lst[i] <- out.table.str
i <- i+1
}
out.str.lst[1] <- paste0("Bias ($\\times$ 100)",out.str.lst[1], "\\","\\  [2pt] \n")
out.str.lst[2] <- paste0("SE ",out.str.lst[2], "\\","\\  [2pt] \n")
out.str.lst[3] <- paste0("CI covg. ",out.str.lst[3], "\\","\\  [2pt] \n")
out.str.lst[4] <- paste0("BVar ",out.str.lst[4], "\\","\\  [10pt] \n")
out.str.lst[5] <- paste0("30 cores ",out.str.lst[5], "\\","\\  [2pt] \n")
}
cat(out.str.lst)
library(tidyverse)
library(ggplot2)
library(haven)
library(readxl)
library(table1)
# library(ggbeeswarm)
# library(ltmle)
library(Plasmode)
library(SuperLearner)
#library(ctmle)
library(sl3)
library(tmle3)
library(tictoc)
library(doParallel)
library(doRNG)
library(foreach)
library(randomForest)
cluster <- F; is.timing <- T
N_sims <- 100# this should <= plas_sim_N
if (cluster == T){
# path <- "/n/holyscratch01/murphy_lab/Users/xmeng/submitted100220"
# setwd(paste0(path))
args = commandArgs(TRUE)
print(args)
est.method <- args[[1]];
non.par <- ifelse(args[[2]]=="non-par",T,F)
N_sims <- as.numeric(args[[3]])
is.timing <- !is.na(args[[4]])
doIPW = 0; doLASSO=0;
doAIPW=0; doDCAIPW=0
doManuTMLE=0; doDCTMLE=0; doGComp=0
num_cf=5
doShortTMLE = 0
#control=list()
control=SuperLearner.CV.control(V=2)
if (est.method=="non-DC"){
doIPW = 1; doLASSO=1;
doAIPW=1; doManuTMLE=1;
}else if (est.method=="DCTMLE"){
doDCTMLE = 1
}else if (est.method=="DCAIPW"){
doDCAIPW = 1
}else if (est.method=="TMLE"){
doManuTMLE=1
}else if (est.method=="AIPW"){
doAIPW=1
}else if (est.method=="IPW"){
doIPW=1
}else if (est.method=="GComp"){
doGComp=1
}
if (is.timing==T){
no_cores <- as.numeric(args[[5]])
}else{
no_cores <- detectCores(all.tests = T) - 2
}
}else{
non.par <- T
est.method <- ''
setwd("~/Desktop/HuangGroup/cvtmle_plasmode/Code/cluster/no4partial1")
# path <- "~/Desktop/HuangGroup/cvtmle_plasmode"
# setwd(paste0(path,"/Code"))
}
set.seed(42782)
options(tibble.print_max = 40, tibble.print_min = 30)
no_cores <- detectCores(all.tests = T) - 2
registerDoParallel(cores=no_cores)
# Set simulation parameters
{
sims.ver <- "plas"
# sims.ver <- "5var"
# sims.ver <- "5var.then.plas"
# sims.ver <- "5var.hard"
Effect_Size <- 6.6
plas.seed <- 1111
########
# parameters for plasmode
#######
# p=331 for the whole set
data.ver <- "FULL"
# data.ver <- "13"
size <- 1178
# size <-200
plas_sim_N <- 500; use.subset <- F
generateA <- T
estimateWithMore <- F; p.sim = 100;p.est <- 50
randVar = F # Do we permute variable order?
isHandPick = T; idx.handpick <- c(1,2,5,18, 217, 2:40)
interact=T;
interact.w.exp = F
est.interact <- T # Estimate with first order interaction?
########
# parameters for 5 var, 5var.then.plas
#######
# Nsets <- 10000
# Nsamp <- 3000
Nsets <- 500
Nsamp <- 600
}
source("20200803-Sims-Function.R")
cat(sims.ver)
sims.obj <- general.sim(sims.ver)
if (sims.ver == "plas"|sims.ver == "5var.then.plas"){
plas <- sims.obj$plas
plas_sims <- sims.obj$plas_sims
vars <- sims.obj$vars
}else{
sim_boots <- sims.obj
}
# Plot the regression coefficient in Plasmode simulation
# plot(plas_sims$TrueOutBeta)
print("Simulation: ")
print(paste0("OR form: ",plas_sims$outForm))
print(paste0("PS form: ",plas_sims$expForm))
# save(plas_sims, file=paste0("/Users/garethalex/Desktop/HuangGroup/cvtmle_plasmode/Code/RDataFiles/",
#                             "Plasmode-A-less-1st.RData"))
##################################
## PARALLELIZE ANALYSES
##################################
# Set param
{
# DC implementation
source("20200705-DCDR-Functions.R")
# getRES function is now relocated to a separate file (20200720-Algos-code.R)
source("20200720-Algos-code.R")
# specify which set of learners for SL
if (non.par == T){
### NON-SMOOTH
short_tmle_lib <- SL_param_list
tmle_lib <- lrnr_SL
aipw_lib <- SL.lib
}
else{
# SMOOTH
short_tmle_lib <- SL_list
tmle_lib <- lrnr_SL_param
aipw_lib <- SL.param
}
# aipw_lib <- c("SL.glmnet")
# errorhandling="stop"
errorhandling="remove"
if (cluster != T){
doIPW = 1; doLASSO=0;
doAIPW=0; doDCAIPW=0
doManuTMLE=0; doDCTMLE=0
num_cf=5; doGComp=0
doShortTMLE = 0
#control=list()
control=SuperLearner.CV.control(V=2)
}
}
if (cluster != T){
doIPW = 0; doLASSO=0;
doAIPW=0; doDCAIPW=0
doManuTMLE=1; doDCTMLE=0
num_cf=5; doGComp=0
doShortTMLE = 0
#control=list()
control=SuperLearner.CV.control(V=2)
}
#########
# run
##########
source("20200904-run-sim-code.R")
#########
# run
##########
source("20200904-run-sim-code.R")
#########
# run
##########
source("20200904-run-sim-code.R")
i <- 11
# i <- 11
plas_data <- cbind(id = plas_sims$Sim_Data[i],
A = plas_sims$Sim_Data[i + (2*plas_sim_N)],
Y = plas_sims$Sim_Data[i + plas_sim_N])
colnames(plas_data) <- c("id", "A", "Y")
set1 <- suppressMessages(left_join(as_tibble(plas_data), as_tibble(plas))) #dplyr::select(as_tibble(plas), -Y5, -A1))) # add covariates
tset <- set1 %>% mutate(YT = (Y-min(set1$Y))/(max(set1$Y)- min(set1$Y)))
getRES(set1, tset, aipw_lib, tmle_lib, short_tmle_lib,
doIPW = doIPW, doLASSO=doLASSO,
doAIPW=doAIPW,
doDCAIPW=doDCAIPW,
doManuTMLE=doManuTMLE, doShortTMLE = doShortTMLE,
doDCTMLE=doDCTMLE,doGComp=doGComp,
num_cf=num_cf,
#control=list()
control=control,
expForm=expForm, outForm=outForm
)
library(tidyverse)
library(ggplot2)
library(haven)
library(readxl)
library(table1)
# library(ggbeeswarm)
# library(ltmle)
library(Plasmode)
library(SuperLearner)
#library(ctmle)
library(sl3)
library(tmle3)
library(tictoc)
library(doParallel)
library(doRNG)
library(foreach)
library(randomForest)
cluster <- F; is.timing <- T
parallel.for.DC <- F # This is variable is controlling whether we use parallelism in DC_single fitting
N_sims <- 10# this should <= plas_sim_N
if (cluster == T){
# path <- "/n/holyscratch01/murphy_lab/Users/xmeng/submitted100220"
# setwd(paste0(path))
args = commandArgs(TRUE)
print(args)
est.method <- args[[1]];
non.par <- ifelse(args[[2]]=="non-par",T,F)
N_sims <- as.numeric(args[[3]])
is.timing <- !is.na(args[[4]])
doIPW = 0; doLASSO=0;
doAIPW=0; doDCAIPW=0
doManuTMLE=0; doDCTMLE=0; doGComp=0
num_cf=5
doShortTMLE = 0
#control=list()
control=SuperLearner.CV.control(V=2)
if (est.method=="non-DC"){
doIPW = 1; doLASSO=1;
doAIPW=1; doManuTMLE=1;
}else if (est.method=="DCTMLE"){
doDCTMLE = 1
}else if (est.method=="DCAIPW"){
doDCAIPW = 1
}else if (est.method=="TMLE"){
doManuTMLE=1
}else if (est.method=="AIPW"){
doAIPW=1
}else if (est.method=="IPW"){
doIPW=1
}else if (est.method=="GComp"){
doGComp=1
}
if (is.timing==T){
no_cores <- as.numeric(args[[5]])
}else{
no_cores <- detectCores(all.tests = T) - 2
}
}else{
non.par <- F
est.method <- ''
path <- "~/Desktop/HuangGroup/cvtmle_plasmode/Code/cluster/no2correct/"
setwd(paste0(path))
}
set.seed(42782)
options(tibble.print_max = 40, tibble.print_min = 30)
no_cores <- detectCores(all.tests = T) - 2
registerDoParallel(cores=no_cores)
# Set simulation parameters
{
sims.ver <- "plas"
# sims.ver <- "5var"
# sims.ver <- "5var.then.plas"
# sims.ver <- "5var.hard"
Effect_Size <- 6.6
plas.seed <- 2222
########
# parameters for plasmode
#######
# p=331 for the whole set
data.ver <- "FULL"
# data.ver <- "13"
size <- 1178
# size <-200
plas_sim_N <- 500; use.subset <- F
generateA <- T
estimateWithMore <- F; p.sim = 100;p.est <- 50
randVar = F # Do we permute variable order?
isHandPick = T; idx.handpick <- c(1,2,5,18, 217)
interact=T;
interact.w.exp = T
########
# parameters for 5 var, 5var.then.plas
#######
# Nsets <- 10000
# Nsamp <- 3000
Nsets <- 500
Nsamp <- 600
}
source("20200803-Sims-Function.R")
cat(sims.ver)
sims.obj <- general.sim(sims.ver)
if (sims.ver == "plas"|sims.ver == "5var.then.plas"){
plas <- sims.obj$plas
plas_sims <- sims.obj$plas_sims
vars <- sims.obj$vars
}else{
sim_boots <- sims.obj
}
plas_sims$RD
setwd("~/Desktop/HuangGroup/cvtmle_plasmode/Code")
# Effect_Size <- 6.6
# Effect_Size <- 5.51788
Effect_Size <- 1.190723
path <- "~/Desktop/HuangGroup/cvtmle_plasmode/Code/cluster/no2/"
folder <- "RDataFiles";
# folder<-"ResBefore5Apr2021"
is.timing <- T
tim.str <- ifelse(is.timing,"-timing","")
# mtd.lst <- c("IPW","GComp","TMLE","AIPW","DCTMLE","DCAIPW")
mtd.lst  <- c("IPW","TMLE","AIPW","DCTMLE","DCAIPW")
adjustPath <- function(res.path){
adjusted=F
tryCatch(
{
message(paste0("Try loading ", res.path))
load(res.path)
},
error=function(cond) {
message(paste("There is no file at", res.path))
res.path <- paste0(path,folder, "/result-",mtd,"-par",".RData")
adjusted=T
message(paste("Set path to the non-timing version:", res.path))
return(NULL)
},
finally={
a <- 1
}
)
return(list(res.path=res.path, adjusted=adjusted))
}
is.timing <- T;tim.str <- ifelse(is.timing,"-timing","")
{
out.lst <- c("med_bias","med_SE","coverage","var", "med_t")
out.str.lst <- character(length(out.lst))
source("20200816-Result-Summary.R")
i <- 1
# load(paste0(path,folder, "/result-GComp","-par",tim.str,".RData"))
for (out.var in out.lst){
out.table.str <- ""
for (mtd in mtd.lst){
# if ((mtd  != "IPW") || (mtd  != "GComp")){
#   is.timing <- T;tim.str <- ifelse(is.timing,"-timing","")
#   res.path <- paste0(path,folder, "/result-",mtd,"-non-par",tim.str,".RData")
# }else{
res.path <- paste0(path,folder, "/result-",mtd,"-par",tim.str,".RData")
load(res.path)
path.obj <- adjustPath(res.path)
res.path <- path.obj$res.path
out.table.str <- append.res(out.table.str, res.path, out.var, path.obj$adjusted)
if ((mtd  != "IPW") && (mtd  != "GComp")){ # append non-par result
res.path <- paste0(path,folder, "/result-",mtd,"-non-par",tim.str,".RData")
path.obj <- adjustPath(res.path)
res.path <- path.obj$res.path
out.table.str <- append.res(out.table.str, res.path, out.var, path.obj$adjusted)
}
}
out.str.lst[i] <- out.table.str
i <- i+1
}
out.str.lst[1] <- paste0("Bias ($\\times$ 100)",out.str.lst[1], "\\","\\  [2pt] \n")
out.str.lst[2] <- paste0("SE ",out.str.lst[2], "\\","\\  [2pt] \n")
out.str.lst[3] <- paste0("CI covg. ",out.str.lst[3], "\\","\\  [2pt] \n")
out.str.lst[4] <- paste0("BVar ",out.str.lst[4], "\\","\\  [10pt] \n")
out.str.lst[5] <- paste0("30 cores ",out.str.lst[5], "\\","\\  [2pt] \n")
}
cat(out.str.lst)
{
source("20200816-Result-Summary.R")
path.lst <- c("~/Desktop/HuangGroup/cvtmle_plasmode/Code/cluster/no4/")
situ.lst <- c("A.bad")
Effect_Size = 6.6
mtd.lst <- c("IPW","TMLE","AIPW","DCTMLE","DCAIPW")
factor.lst <- c("IPW","TMLE.par","TMLE.non.par","AIPW.par","AIPW.non.par",
"DC-TMLE.par","DC-TMLE.non.par", "DC-AIPW.par","DC-AIPW.non.par")
violin.and.bar.plot.by.situ(path.lst, situ.lst, ci.axis.coeff=0.2)
}
ggsave("/Users/garethalex/Desktop/HuangGroup/cvtmle_plasmode/Output/situA.png",
width = 14, height = 14, dpi = 300, units = "in", device='png')
{
source("20200816-Result-Summary.R")
path.lst <- c("~/Desktop/HuangGroup/cvtmle_plasmode/Code/cluster/no5correct/",
"~/Desktop/HuangGroup/cvtmle_plasmode/Code/cluster/no5/")
situ.lst <- c("B.cor", "B")
Effect_Size = 6.6
mtd.lst <- c("IPW","TMLE","AIPW","DCTMLE","DCAIPW")
factor.lst <- c("IPW","TMLE.par","TMLE.non.par","AIPW.par","AIPW.non.par",
"DC-TMLE.par","DC-TMLE.non.par", "DC-AIPW.par","DC-AIPW.non.par")
violin.and.bar.plot.by.situ(path.lst, situ.lst, ci.axis.coeff=0.2)
}
# path.lst <- c("~/Desktop/HuangGroup/cvtmle_plasmode/Code/cluster/no5correct/",
#               "~/Desktop/HuangGroup/cvtmle_plasmode/Code/cluster/no5/")
path.lst <- c("~/Desktop/HuangGroup/cvtmle_plasmode/Code/cluster/no5/")
{
source("20200816-Result-Summary.R")
# path.lst <- c("~/Desktop/HuangGroup/cvtmle_plasmode/Code/cluster/no5correct/",
#               "~/Desktop/HuangGroup/cvtmle_plasmode/Code/cluster/no5/")
path.lst <- c("~/Desktop/HuangGroup/cvtmle_plasmode/Code/cluster/no5/")
situ.lst <- c("B.cor", "B")
Effect_Size = 6.6
mtd.lst <- c("IPW","TMLE","AIPW","DCTMLE","DCAIPW")
factor.lst <- c("IPW","TMLE.par","TMLE.non.par","AIPW.par","AIPW.non.par",
"DC-TMLE.par","DC-TMLE.non.par", "DC-AIPW.par","DC-AIPW.non.par")
violin.and.bar.plot.by.situ(path.lst, situ.lst, ci.axis.coeff=0.2)
}
ggsave("/Users/garethalex/Desktop/HuangGroup/cvtmle_plasmode/Output/situB.png",
width = 14, height = 14, dpi = 300, units = "in", device='png')
